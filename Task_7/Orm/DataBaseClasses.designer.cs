#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Orm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Colledge1")]
	public partial class DataBaseClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCredit(Credit instance);
    partial void UpdateCredit(Credit instance);
    partial void DeleteCredit(Credit instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    partial void InsertCreditList(CreditList instance);
    partial void UpdateCreditList(CreditList instance);
    partial void DeleteCreditList(CreditList instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExaminer(Examiner instance);
    partial void UpdateExaminer(Examiner instance);
    partial void DeleteExaminer(Examiner instance);
    partial void InsertGradebook(Gradebook instance);
    partial void UpdateGradebook(Gradebook instance);
    partial void DeleteGradebook(Gradebook instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSpecialty(Specialty instance);
    partial void UpdateSpecialty(Specialty instance);
    partial void DeleteSpecialty(Specialty instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    #endregion
		
		public DataBaseClassesDataContext() : 
				base(global::Orm.Properties.Settings.Default.Colledge1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Credit> Credit
		{
			get
			{
				return this.GetTable<Credit>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Theme
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
		
		public System.Data.Linq.Table<CreditList> CreditList
		{
			get
			{
				return this.GetTable<CreditList>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exam
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<Examiner> Examiner
		{
			get
			{
				return this.GetTable<Examiner>();
			}
		}
		
		public System.Data.Linq.Table<Gradebook> Gradebook
		{
			get
			{
				return this.GetTable<Gradebook>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Session> Session
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Specialty> Specialty
		{
			get
			{
				return this.GetTable<Specialty>();
			}
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subject
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Credit")]
	public partial class Credit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _ExaminerId;
		
		private System.Nullable<System.DateTime> _DateOfCredit;
		
		private EntityRef<Examiner> _Examiner;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnExaminerIdChanging(System.Nullable<int> value);
    partial void OnExaminerIdChanged();
    partial void OnDateOfCreditChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfCreditChanged();
    #endregion
		
		public Credit()
		{
			this._Examiner = default(EntityRef<Examiner>);
			this._Group = default(EntityRef<Group>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminerId", DbType="Int")]
		public System.Nullable<int> ExaminerId
		{
			get
			{
				return this._ExaminerId;
			}
			set
			{
				if ((this._ExaminerId != value))
				{
					if (this._Examiner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminerIdChanging(value);
					this.SendPropertyChanging();
					this._ExaminerId = value;
					this.SendPropertyChanged("ExaminerId");
					this.OnExaminerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCredit", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfCredit
		{
			get
			{
				return this._DateOfCredit;
			}
			set
			{
				if ((this._DateOfCredit != value))
				{
					this.OnDateOfCreditChanging(value);
					this.SendPropertyChanging();
					this._DateOfCredit = value;
					this.SendPropertyChanged("DateOfCredit");
					this.OnDateOfCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Credit", Storage="_Examiner", ThisKey="ExaminerId", OtherKey="Id", IsForeignKey=true)]
		public Examiner Examiner
		{
			get
			{
				return this._Examiner.Entity;
			}
			set
			{
				Examiner previousValue = this._Examiner.Entity;
				if (((previousValue != value) 
							|| (this._Examiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiner.Entity = null;
						previousValue.Credit.Remove(this);
					}
					this._Examiner.Entity = value;
					if ((value != null))
					{
						value.Credit.Add(this);
						this._ExaminerId = value.Id;
					}
					else
					{
						this._ExaminerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Credit", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Credit.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Credit.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Credit", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Credit.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Credit.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theme")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SubjectId;
		
		private string _Name;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Theme()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Theme", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Theme.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Theme.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditList")]
	public partial class CreditList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _SessionId;
		
		private bool _Passed;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnPassedChanging(bool value);
    partial void OnPassedChanged();
    #endregion
		
		public CreditList()
		{
			this._Session = default(EntityRef<Session>);
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passed", DbType="Bit NOT NULL")]
		public bool Passed
		{
			get
			{
				return this._Passed;
			}
			set
			{
				if ((this._Passed != value))
				{
					this.OnPassedChanging(value);
					this.SendPropertyChanging();
					this._Passed = value;
					this.SendPropertyChanged("Passed");
					this.OnPassedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_CreditList", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.CreditList.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.CreditList.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_CreditList", Storage="_Student", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.CreditList.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.CreditList.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_CreditList", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.CreditList.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.CreditList.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<System.DateTime> _DateOfExam;
		
		private System.Nullable<int> _ExaminerId;
		
		private EntityRef<Examiner> _Examiner;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnDateOfExamChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfExamChanged();
    partial void OnExaminerIdChanging(System.Nullable<int> value);
    partial void OnExaminerIdChanged();
    #endregion
		
		public Exam()
		{
			this._Examiner = default(EntityRef<Examiner>);
			this._Group = default(EntityRef<Group>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfExam", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfExam
		{
			get
			{
				return this._DateOfExam;
			}
			set
			{
				if ((this._DateOfExam != value))
				{
					this.OnDateOfExamChanging(value);
					this.SendPropertyChanging();
					this._DateOfExam = value;
					this.SendPropertyChanged("DateOfExam");
					this.OnDateOfExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminerId", DbType="Int")]
		public System.Nullable<int> ExaminerId
		{
			get
			{
				return this._ExaminerId;
			}
			set
			{
				if ((this._ExaminerId != value))
				{
					if (this._Examiner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminerIdChanging(value);
					this.SendPropertyChanging();
					this._ExaminerId = value;
					this.SendPropertyChanged("ExaminerId");
					this.OnExaminerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Exam", Storage="_Examiner", ThisKey="ExaminerId", OtherKey="Id", IsForeignKey=true)]
		public Examiner Examiner
		{
			get
			{
				return this._Examiner.Entity;
			}
			set
			{
				Examiner previousValue = this._Examiner.Entity;
				if (((previousValue != value) 
							|| (this._Examiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiner.Entity = null;
						previousValue.Exam.Remove(this);
					}
					this._Examiner.Entity = value;
					if ((value != null))
					{
						value.Exam.Add(this);
						this._ExaminerId = value.Id;
					}
					else
					{
						this._ExaminerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Exam", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Exam.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Exam.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Exam", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Exam.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Exam.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examiner")]
	public partial class Examiner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _LastName;
		
		private EntitySet<Credit> _Credit;
		
		private EntitySet<Exam> _Exam;
		
		private EntitySet<Gradebook> _Gradebook;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Examiner()
		{
			this._Credit = new EntitySet<Credit>(new Action<Credit>(this.attach_Credit), new Action<Credit>(this.detach_Credit));
			this._Exam = new EntitySet<Exam>(new Action<Exam>(this.attach_Exam), new Action<Exam>(this.detach_Exam));
			this._Gradebook = new EntitySet<Gradebook>(new Action<Gradebook>(this.attach_Gradebook), new Action<Gradebook>(this.detach_Gradebook));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Credit", Storage="_Credit", ThisKey="Id", OtherKey="ExaminerId")]
		public EntitySet<Credit> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				this._Credit.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Exam", Storage="_Exam", ThisKey="Id", OtherKey="ExaminerId")]
		public EntitySet<Exam> Exam
		{
			get
			{
				return this._Exam;
			}
			set
			{
				this._Exam.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Gradebook", Storage="_Gradebook", ThisKey="Id", OtherKey="ExaminerId")]
		public EntitySet<Gradebook> Gradebook
		{
			get
			{
				return this._Gradebook;
			}
			set
			{
				this._Gradebook.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = this;
		}
		
		private void detach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = null;
		}
		
		private void attach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = this;
		}
		
		private void detach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = null;
		}
		
		private void attach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = this;
		}
		
		private void detach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gradebook")]
	public partial class Gradebook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _ExaminerId;
		
		private int _Mark;
		
		private EntityRef<Examiner> _Examiner;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnExaminerIdChanging(System.Nullable<int> value);
    partial void OnExaminerIdChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    #endregion
		
		public Gradebook()
		{
			this._Examiner = default(EntityRef<Examiner>);
			this._Session = default(EntityRef<Session>);
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminerId", DbType="Int")]
		public System.Nullable<int> ExaminerId
		{
			get
			{
				return this._ExaminerId;
			}
			set
			{
				if ((this._ExaminerId != value))
				{
					if (this._Examiner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminerIdChanging(value);
					this.SendPropertyChanging();
					this._ExaminerId = value;
					this.SendPropertyChanged("ExaminerId");
					this.OnExaminerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Gradebook", Storage="_Examiner", ThisKey="ExaminerId", OtherKey="Id", IsForeignKey=true)]
		public Examiner Examiner
		{
			get
			{
				return this._Examiner.Entity;
			}
			set
			{
				Examiner previousValue = this._Examiner.Entity;
				if (((previousValue != value) 
							|| (this._Examiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiner.Entity = null;
						previousValue.Gradebook.Remove(this);
					}
					this._Examiner.Entity = value;
					if ((value != null))
					{
						value.Gradebook.Add(this);
						this._ExaminerId = value.Id;
					}
					else
					{
						this._ExaminerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Gradebook", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Gradebook.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Gradebook.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Gradebook", Storage="_Student", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Gradebook.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Gradebook.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Gradebook", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Gradebook.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Gradebook.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SpecialtyId;
		
		private string _Name;
		
		private EntitySet<Credit> _Credit;
		
		private EntitySet<Exam> _Exam;
		
		private EntitySet<Session> _Session;
		
		private EntitySet<Student> _Student;
		
		private EntityRef<Specialty> _Specialty;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialtyIdChanging(System.Nullable<int> value);
    partial void OnSpecialtyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Group()
		{
			this._Credit = new EntitySet<Credit>(new Action<Credit>(this.attach_Credit), new Action<Credit>(this.detach_Credit));
			this._Exam = new EntitySet<Exam>(new Action<Exam>(this.attach_Exam), new Action<Exam>(this.detach_Exam));
			this._Session = new EntitySet<Session>(new Action<Session>(this.attach_Session), new Action<Session>(this.detach_Session));
			this._Student = new EntitySet<Student>(new Action<Student>(this.attach_Student), new Action<Student>(this.detach_Student));
			this._Specialty = default(EntityRef<Specialty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyId", DbType="Int")]
		public System.Nullable<int> SpecialtyId
		{
			get
			{
				return this._SpecialtyId;
			}
			set
			{
				if ((this._SpecialtyId != value))
				{
					if (this._Specialty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyId = value;
					this.SendPropertyChanged("SpecialtyId");
					this.OnSpecialtyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Credit", Storage="_Credit", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Credit> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				this._Credit.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Exam", Storage="_Exam", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Exam> Exam
		{
			get
			{
				return this._Exam;
			}
			set
			{
				this._Exam.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Session", Storage="_Session", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Session> Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				this._Session.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Student", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Student> Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				this._Student.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Group", Storage="_Specialty", ThisKey="SpecialtyId", OtherKey="Id", IsForeignKey=true)]
		public Specialty Specialty
		{
			get
			{
				return this._Specialty.Entity;
			}
			set
			{
				Specialty previousValue = this._Specialty.Entity;
				if (((previousValue != value) 
							|| (this._Specialty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialty.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._Specialty.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._SpecialtyId = value.Id;
					}
					else
					{
						this._SpecialtyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specialty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Session(Session entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Session(Session entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GroupId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private EntitySet<CreditList> _CreditList;
		
		private EntitySet<Gradebook> _Gradebook;
		
		private EntityRef<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public Session()
		{
			this._CreditList = new EntitySet<CreditList>(new Action<CreditList>(this.attach_CreditList), new Action<CreditList>(this.detach_CreditList));
			this._Gradebook = new EntitySet<Gradebook>(new Action<Gradebook>(this.attach_Gradebook), new Action<Gradebook>(this.detach_Gradebook));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_CreditList", Storage="_CreditList", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<CreditList> CreditList
		{
			get
			{
				return this._CreditList;
			}
			set
			{
				this._CreditList.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Gradebook", Storage="_Gradebook", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<Gradebook> Gradebook
		{
			get
			{
				return this._Gradebook;
			}
			set
			{
				this._Gradebook.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Session", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Session.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Session.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialty")]
	public partial class Specialty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Specialty()
		{
			this._Group = new EntitySet<Group>(new Action<Group>(this.attach_Group), new Action<Group>(this.detach_Group));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Group", Storage="_Group", ThisKey="Id", OtherKey="SpecialtyId")]
		public EntitySet<Group> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Specialty = this;
		}
		
		private void detach_Group(Group entity)
		{
			this.SendPropertyChanging();
			entity.Specialty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _LastName;
		
		private System.DateTime _DateOfBirth;
		
		private System.Nullable<int> _GroupId;
		
		private EntitySet<CreditList> _CreditList;
		
		private EntitySet<Gradebook> _Gradebook;
		
		private EntityRef<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Student()
		{
			this._CreditList = new EntitySet<CreditList>(new Action<CreditList>(this.attach_CreditList), new Action<CreditList>(this.detach_CreditList));
			this._Gradebook = new EntitySet<Gradebook>(new Action<Gradebook>(this.attach_Gradebook), new Action<Gradebook>(this.detach_Gradebook));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_CreditList", Storage="_CreditList", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<CreditList> CreditList
		{
			get
			{
				return this._CreditList;
			}
			set
			{
				this._CreditList.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Gradebook", Storage="_Gradebook", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<Gradebook> Gradebook
		{
			get
			{
				return this._Gradebook;
			}
			set
			{
				this._Gradebook.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Student.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Student.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Credit> _Credit;
		
		private EntitySet<Theme> _Theme;
		
		private EntitySet<CreditList> _CreditList;
		
		private EntitySet<Exam> _Exam;
		
		private EntitySet<Gradebook> _Gradebook;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Subject()
		{
			this._Credit = new EntitySet<Credit>(new Action<Credit>(this.attach_Credit), new Action<Credit>(this.detach_Credit));
			this._Theme = new EntitySet<Theme>(new Action<Theme>(this.attach_Theme), new Action<Theme>(this.detach_Theme));
			this._CreditList = new EntitySet<CreditList>(new Action<CreditList>(this.attach_CreditList), new Action<CreditList>(this.detach_CreditList));
			this._Exam = new EntitySet<Exam>(new Action<Exam>(this.attach_Exam), new Action<Exam>(this.detach_Exam));
			this._Gradebook = new EntitySet<Gradebook>(new Action<Gradebook>(this.attach_Gradebook), new Action<Gradebook>(this.detach_Gradebook));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Credit", Storage="_Credit", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<Credit> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				this._Credit.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Theme", Storage="_Theme", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<Theme> Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				this._Theme.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_CreditList", Storage="_CreditList", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<CreditList> CreditList
		{
			get
			{
				return this._CreditList;
			}
			set
			{
				this._CreditList.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Exam", Storage="_Exam", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<Exam> Exam
		{
			get
			{
				return this._Exam;
			}
			set
			{
				this._Exam.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Gradebook", Storage="_Gradebook", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<Gradebook> Gradebook
		{
			get
			{
				return this._Gradebook;
			}
			set
			{
				this._Gradebook.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Credit(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Theme(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Theme(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_CreditList(CreditList entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Exam(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Gradebook(Gradebook entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
}
#pragma warning restore 1591
